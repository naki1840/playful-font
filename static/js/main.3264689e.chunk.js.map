{"version":3,"sources":["components/TextAnime/TextAnime.tsx","components/TextAnime/useStable.ts","constants/animeEffect.ts","constants/fonts.ts","constants/words.ts","components/FontBox/FontBoxAccordion.tsx","components/FontBox/FontBoxAnime.tsx","components/ControlButton.tsx","components/FontBox/FontBoxForm.tsx","components/TextAnime/useAnimeRef.ts","components/FontBox/FontBox.tsx","components/HeroButton.tsx","components/TitleFont.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextAnime","inputRef","config","word","font","cascade","isStable","value","ref","useRef","useState","setIsStable","useEffect","timer","current","setTimeout","clearTimeout","useStable","newWord","dispWord","split","map","el","index","style","display","flexDirection","justifyContent","commonConfig","delay","i","loop","direction","autoplay","endDelay","animeEffects","name","translateY","opacity","easing","fonts","weights","getRandomFontIndex","Math","floor","random","length","words","Accordion","withStyles","root","border","boxShadow","borderBottom","margin","expanded","MuiAccordion","useStyles","makeStyles","warapper","position","height","AccordionSummaryWrapper","children","classes","className","AccordionSummary","width","backgroundColor","bottom","borderRadius","minHeight","content","MuiAccordionSummary","AccordionDetails","MuiAccordionDetails","FontBoxAccordion","expandIcon","aria-controls","Typography","FontBoxAnime","watch","useFormContext","valueWord","valueFontIndex","valueAnimeIndex","animeEffect","fontsize","isWidth376Over","useMediaQuery","isWidth321Over","useFontsize","subsets","component","variant","align","color","fontFamily","theme","button","marginTop","spacing","breakpoints","down","marginRight","marginLeft","up","ButtonReset","onClick","Button","startIcon","ButtonPause","ButtonPlay","WordTextField","control","render","field","TextField","label","fullWidth","FontSelect","onChange","select","option","MenuItem","AnimeSelect","FontBoxForm","isPlaying","setIsPlaying","animeControl","restart","play","pause","reverse","getAnimeControl","Grid","container","justify","alignItems","item","xs","sm","md","Box","textAlign","bgList","bg","props","main","overflow","FontBox","methods","useForm","defaultValues","fontIndex","animeIndex","animeRef","pt","pb","usePadding","clsx","ColorButtonGithub","ButtonGithub","href","ColorButtonRefresh","ButtonRefresh","document","location","reload","ColorButtonFont","ButtonFont","TitleFont","fontList","heroContent","palette","background","paper","padding","heroButtons","footer","list","App","CssBaseline","Container","maxWidth","gutterBottom","paragraph","Link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3264689e.chunk.js","sourcesContent":["import { FC } from 'react'\n\nimport Anime from 'react-animejs-wrapper'\n\nimport { AnimeRef } from './type'\nimport { useStable } from './useStable'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnimePropsConfig = any\ntype Props = {\n  inputRef: AnimeRef\n  config: AnimePropsConfig\n  word: string\n  font: string\n  cascade?: boolean\n}\n\nexport const TextAnime: FC<Props> = ({ inputRef, config, word, font, cascade = true }) => {\n  const isStable = useStable(font)\n\n  if (!config) return null\n\n  const newWord = isStable && word ? word : ' '\n  /* eslint-disable react/no-array-index-key */\n  const dispWord = cascade\n    ? newWord\n        .split('')\n        .map((el) => (el === ' ' ? '\\u00A0' : el))\n        .map((el, index) => <div key={index}>{el}</div>)\n    : newWord\n  /* eslint-enable react/no-array-index-key */\n\n  return (\n    <Anime\n      ref={inputRef}\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n      config={config}\n    >\n      {dispWord}\n    </Anime>\n  )\n}\n","import { useState, useEffect, useRef } from 'react'\n\nexport const useStable = <T>(value: T): boolean => {\n  const ref = useRef<T>()\n  const [isStable, setIsStable] = useState<boolean>(false)\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout\n\n    if (ref.current !== value) {\n      setIsStable(false)\n      timer = setTimeout(() => setIsStable(true), 500)\n      ref.current = value\n    }\n\n    return () => clearTimeout(timer)\n  }, [value])\n\n  return isStable\n}\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AnimeEffect = { name: string; config: any }\n\nconst commonConfig = {\n  delay(el: never, i: number): number {\n    return i * 100\n  },\n  loop: true,\n  direction: 'normal',\n  autoplay: true,\n  endDelay: 1000,\n}\nexport const animeEffects: AnimeEffect[] = [\n  {\n    name: 'Fade in',\n    config: {\n      translateY: 0,\n      opacity: [0, 1],\n      easing: 'easeInOutSine',\n      ...commonConfig,\n    },\n  },\n  {\n    name: 'Fade in from the top',\n    config: {\n      translateY: [-50, 0],\n      opacity: [0, 1],\n      easing: 'easeInOutSine',\n      ...commonConfig,\n    },\n  },\n  {\n    name: 'Raindrops',\n    config: {\n      translateY: [-80, 0],\n      opacity: [0, 1],\n      easing: 'easeOutBounce',\n      ...commonConfig,\n    },\n  },\n  {\n    name: 'Light on',\n    config: {\n      translateY: 0,\n      opacity: [0, 1],\n      easing: 'easeInBounce',\n      ...commonConfig,\n    },\n  },\n]\n\nexport const getRandomAnimeIndex = (): number => Math.floor(Math.random() * animeEffects.length)\n","import { Font } from 'react-google-font-loader'\n\nexport type { Font }\n\nexport const fonts: Font[] = [\n  { font: 'Pacifico', weights: [400] },\n  { font: 'Goblin One', weights: [400] },\n  { font: 'Crimson Text', weights: [400] },\n  { font: 'Zen Dots', weights: [400] },\n  { font: 'Dancing Script', weights: [400] },\n  { font: 'Itim', weights: [400] },\n  { font: 'Girassol', weights: [400] },\n  { font: 'Josefin Sans', weights: [400] },\n  { font: 'Anton', weights: [400] },\n  { font: 'Dosis', weights: [400] },\n  { font: 'Libre Baskerville', weights: [400] },\n  { font: 'Lobster', weights: [400] },\n  { font: 'New Tegomin', weights: [400] },\n  { font: 'EB Garamond', weights: [400] },\n  { font: 'Indie Flower', weights: [400] },\n  { font: 'Original Surfer', weights: [400] },\n  { font: 'Abril Fatface', weights: [400] },\n  { font: 'Caveat', weights: [400] },\n  { font: 'Satisfy', weights: [400] },\n  { font: 'Righteous', weights: [400] },\n  { font: 'Cinzel', weights: [400] },\n  { font: 'Permanent Marker', weights: [400] },\n  { font: 'Great Vibes', weights: [400] },\n  { font: 'Sacramento', weights: [400] },\n]\n\nexport const getRandomFontIndex = (): number => Math.floor(Math.random() * fonts.length)\n","export const words = [\n  'welcome',\n  'Good Morning',\n  'Good Afternoon',\n  'Good Evening',\n  'Hello',\n  'Thank you',\n  'Welcome & Thank you!',\n  'Have a wonderful time!',\n  'Congratulations!',\n  'Cheers!',\n  'Wonderful!',\n  'Best wishes!',\n  'Sounds good!',\n  'Awesome',\n  'Believe in yourself',\n  'Just do it',\n  'Let it be',\n  'Let’s have a break',\n  'Keep smiling',\n  'Success',\n  'Time is money',\n  'Have a nice day!',\n  'Good luck!',\n]\n\nexport const getRandomWord = (): string => words[Math.floor(Math.random() * words.length)]\n","import { FC } from 'react'\n\nimport MuiAccordion from '@material-ui/core/Accordion'\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails'\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary'\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nconst Accordion = withStyles({\n  root: {\n    border: 'none',\n    boxShadow: 'none',\n    '&:not(:last-child)': {\n      borderBottom: 0,\n    },\n    '&:before': {\n      display: 'none',\n    },\n    '&$expanded': {\n      margin: 'auto',\n    },\n  },\n  expanded: {},\n})(MuiAccordion)\n\nconst useStyles = makeStyles(() => ({\n  warapper: {\n    position: 'relative',\n    height: '10px',\n  },\n}))\nconst AccordionSummaryWrapper: FC = ({ children }) => {\n  const classes = useStyles()\n  return <div className={classes.warapper}>{children}</div>\n}\n\nconst AccordionSummary = withStyles({\n  root: {\n    width: '100px',\n    backgroundColor: 'rgba(255,255,255,1.0)',\n    position: 'absolute',\n    bottom: '0px',\n    borderRadius: '6px',\n    '&$expanded': {\n      minHeight: '20px',\n    },\n  },\n  content: {\n    '&$expanded': {\n      margin: '15px 0;',\n    },\n  },\n  expanded: {},\n})(MuiAccordionSummary)\n\nconst AccordionDetails = withStyles({\n  root: {\n    flexDirection: 'column',\n  },\n})(MuiAccordionDetails)\n\nexport const FontBoxAccordion: FC = ({ children }) => (\n  <Accordion>\n    <AccordionSummaryWrapper>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\">\n        <Typography>setting</Typography>\n      </AccordionSummary>\n    </AccordionSummaryWrapper>\n    <AccordionDetails>{children}</AccordionDetails>\n  </Accordion>\n)\n","import { FC } from 'react'\n\nimport Typography from '@material-ui/core/Typography'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport GoogleFontLoader from 'react-google-font-loader'\nimport { useFormContext } from 'react-hook-form'\n\nimport { TextAnime, AnimeRef } from 'src/components/TextAnime'\nimport { animeEffects } from 'src/constants/animeEffect'\nimport { fonts } from 'src/constants/fonts'\n\nimport { FormValues } from './type'\n\nconst useFontsize = () => {\n  const isWidth376Over = useMediaQuery('(min-width:376px)')\n  const isWidth321Over = useMediaQuery('(min-width:321px)')\n\n  if (isWidth376Over) return 'h3'\n  if (isWidth321Over) return 'h4'\n  return 'h5'\n}\n\ntype Props = {\n  inputRef: AnimeRef\n}\nexport const FontBoxAnime: FC<Props> = ({ inputRef }) => {\n  const { watch } = useFormContext<FormValues>()\n  const valueWord = watch('word')\n  const valueFontIndex = watch('fontIndex')\n  const font = fonts[valueFontIndex]\n  const valueAnimeIndex = watch('animeIndex')\n  const animeEffect = animeEffects[valueAnimeIndex]\n\n  const fontsize = useFontsize()\n\n  return (\n    <>\n      <GoogleFontLoader fonts={[font]} subsets={['cyrillic-ext', 'greek']} />\n      <Typography\n        component={fontsize}\n        variant={fontsize}\n        align=\"center\"\n        color=\"textPrimary\"\n        style={{ fontFamily: font.font }}\n      >\n        <TextAnime\n          inputRef={inputRef}\n          config={animeEffect.config}\n          word={valueWord}\n          font={font.font}\n        />\n      </Typography>\n    </>\n  )\n}\n","import React, { FC } from 'react'\n\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft'\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    marginTop: theme.spacing(2),\n    [theme.breakpoints.down('xs')]: {\n      width: '100px',\n      marginRight: theme.spacing(1),\n      marginLeft: theme.spacing(1),\n    },\n    [theme.breakpoints.up(400)]: {\n      width: '150px',\n      marginRight: theme.spacing(1),\n      marginLeft: theme.spacing(1),\n    },\n    [theme.breakpoints.up('sm')]: {\n      width: '200px',\n      marginRight: theme.spacing(3),\n      marginLeft: theme.spacing(3),\n    },\n  },\n}))\n\ntype Props = {\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\nexport const ButtonReset: FC<Props> = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.button}\n      startIcon={<RotateLeftIcon />}\n      onClick={onClick}\n    >\n      Reset\n    </Button>\n  )\n}\n\nexport const ButtonPause: FC<Props> = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.button}\n      startIcon={<PauseIcon />}\n      onClick={onClick}\n    >\n      Pause\n    </Button>\n  )\n}\n\nexport const ButtonPlay: FC<Props> = ({ onClick }) => {\n  const classes = useStyles()\n\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.button}\n      startIcon={<PlayArrowIcon />}\n      onClick={onClick}\n    >\n      Play\n    </Button>\n  )\n}\n","/* eslint-disable react/no-array-index-key */\nimport { FC, useState } from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport { Controller, useFormContext } from 'react-hook-form'\n\nimport { ButtonReset, ButtonPause, ButtonPlay } from 'src/components/ControlButton'\nimport { getAnimeControl, AnimeRef } from 'src/components/TextAnime'\nimport { animeEffects } from 'src/constants/animeEffect'\nimport { fonts } from 'src/constants/fonts'\n\nimport { FormValues } from './type'\n\nconst WordTextField: FC = () => {\n  const { control } = useFormContext<FormValues>()\n  return (\n    <Controller\n      name=\"word\"\n      control={control}\n      render={({ field }) => <TextField {...field} label=\"Word\" fullWidth />}\n    />\n  )\n}\n\nconst FontSelect: FC = () => {\n  const { control } = useFormContext<FormValues>()\n  return (\n    <Controller\n      name=\"fontIndex\"\n      control={control}\n      render={({ field: { onChange, value } }) => (\n        <TextField select label=\"Font\" value={value} onChange={onChange} fullWidth>\n          {fonts.map((option, index) => (\n            <MenuItem key={option.font} value={index}>\n              {option.font}\n            </MenuItem>\n          ))}\n        </TextField>\n      )}\n    />\n  )\n}\n\nconst AnimeSelect: FC = () => {\n  const { control } = useFormContext<FormValues>()\n  return (\n    <Controller\n      name=\"animeIndex\"\n      control={control}\n      render={({ field: { onChange, value } }) => (\n        <TextField select label=\"Animation\" value={value} onChange={onChange} fullWidth>\n          {animeEffects.map((option, index) => (\n            <MenuItem key={option.name} value={index}>\n              {option.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      )}\n    />\n  )\n}\n\ntype Props = {\n  inputRef: AnimeRef\n}\nexport const FontBoxForm: FC<Props> = ({ inputRef }) => {\n  const [isPlaying, setIsPlaying] = useState(true)\n  const animeControl = getAnimeControl(inputRef)\n\n  const handleReset = () => {\n    animeControl.restart()\n    setIsPlaying(true)\n  }\n\n  const handlePause = () => {\n    animeControl.pause()\n    setIsPlaying(false)\n  }\n\n  const handlePlay = () => {\n    animeControl.play()\n    setIsPlaying(true)\n  }\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={3}>\n      <Grid item xs={12} sm={12} md={12}>\n        <Box textAlign=\"center\">\n          <ButtonReset onClick={handleReset} />\n          {isPlaying ? <ButtonPause onClick={handlePause} /> : <ButtonPlay onClick={handlePlay} />}\n        </Box>\n      </Grid>\n      <Grid item xs={12} sm={12} md={4}>\n        <WordTextField />\n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n        <FontSelect />\n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n        <AnimeSelect />\n      </Grid>\n    </Grid>\n  )\n}\n","import { useRef } from 'react'\n\nimport { AnimeElement, AnimeRef } from './type'\n\nexport const useAnimeRef = (): AnimeRef => {\n  const ref = useRef<AnimeElement>(null)\n  return ref\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const getAnimeControl = (inputRef: AnimeRef) => {\n  const restart = () => inputRef.current?.restart()\n  const play = () => inputRef.current?.play()\n  const pause = () => inputRef.current?.pause()\n  const reverse = () => inputRef.current?.reverse()\n\n  return {\n    restart,\n    play,\n    pause,\n    reverse,\n  }\n}\n","import { FC } from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport { Theme, makeStyles } from '@material-ui/core/styles'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport clsx from 'clsx'\nimport { useForm, FormProvider } from 'react-hook-form'\n\nimport { useAnimeRef } from 'src/components/TextAnime'\nimport { getRandomAnimeIndex } from 'src/constants/animeEffect'\nimport { getRandomFontIndex } from 'src/constants/fonts'\nimport { getRandomWord } from 'src/constants/words'\n\nimport { FontBoxAccordion } from './FontBoxAccordion'\nimport { FontBoxAnime } from './FontBoxAnime'\nimport { FontBoxForm } from './FontBoxForm'\nimport { FormValues } from './type'\n\nconst bgList = ['#faf3dd', '#b8f2e6', '#ffa69e', '#aed9e0', '#5e6472']\ntype StyleProps = {\n  index: number\n}\nconst useStyles = makeStyles<Theme, StyleProps>(() => ({\n  bg: (props) => ({ backgroundColor: bgList[props.index % bgList.length] }),\n  main: {\n    overflow: 'hidden',\n  },\n}))\n\nconst usePadding = () => {\n  const isWidth376Over = useMediaQuery('(min-width:376px)')\n  const isWidth321Over = useMediaQuery('(min-width:321px)')\n\n  if (isWidth376Over) return { pt: 8, pb: 8 }\n  if (isWidth321Over) return { pt: 7, pb: 7 }\n  return { pt: 6, pb: 7 }\n}\n\ntype Props = {\n  index: number\n}\nexport const FontBox: FC<Props> = ({ index }) => {\n  const classes = useStyles({ index })\n  const methods = useForm<FormValues>({\n    defaultValues: {\n      word: getRandomWord(),\n      fontIndex: getRandomFontIndex(),\n      animeIndex: getRandomAnimeIndex(),\n    },\n  })\n\n  const animeRef = useAnimeRef()\n  const { pt, pb } = usePadding()\n\n  return (\n    <FormProvider {...methods}>\n      <Box pt={pt} pb={pb} className={clsx(classes.main, classes.bg)}>\n        <FontBoxAnime inputRef={animeRef} />\n      </Box>\n\n      <FontBoxAccordion>\n        <FontBoxForm inputRef={animeRef} />\n      </FontBoxAccordion>\n    </FormProvider>\n  )\n}\n","import React, { FC } from 'react'\n\nimport Button from '@material-ui/core/Button'\nimport { withStyles } from '@material-ui/core/styles'\nimport FontDownloadRoundedIcon from '@material-ui/icons/FontDownloadRounded'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'\n\ntype Props = {\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nconst ColorButtonGithub = withStyles(() => ({\n  root: {\n    color: '#444444',\n    backgroundColor: '#B8F2E6',\n    '&:hover': {\n      backgroundColor: '#98ECDB',\n    },\n  },\n}))(Button)\nexport const ButtonGithub: FC<Props> = ({ onClick }) => (\n  <ColorButtonGithub\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<GitHubIcon />}\n    onClick={onClick}\n    href=\"https://github.com/naki1840\"\n  >\n    GitHub\n  </ColorButtonGithub>\n)\n\nconst ColorButtonRefresh = withStyles(() => ({\n  root: {\n    color: '#444444',\n    backgroundColor: '#FFA69E',\n    '&:hover': {\n      backgroundColor: '#FF8F85',\n    },\n  },\n}))(Button)\nexport const ButtonRefresh: FC<Props> = () => (\n  <ColorButtonRefresh\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<RefreshRoundedIcon />}\n    onClick={() => document.location.reload()}\n  >\n    再読み込み\n  </ColorButtonRefresh>\n)\n\nconst ColorButtonFont = withStyles(() => ({\n  root: {\n    color: '#444444',\n    backgroundColor: '#AED9E0',\n    '&:hover': {\n      backgroundColor: '#97CFD8',\n    },\n  },\n}))(Button)\nexport const ButtonFont: FC<Props> = ({ onClick }) => (\n  <ColorButtonFont\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<FontDownloadRoundedIcon />}\n    onClick={onClick}\n    href=\"https://fonts.google.com/\"\n  >\n    Font\n  </ColorButtonFont>\n)\n","import { FC } from 'react'\n\nimport GoogleFontLoader, { Font } from 'react-google-font-loader'\n\nimport { fonts, getRandomFontIndex } from 'src/constants/fonts'\n\nexport const TitleFont: FC = ({ children }) => {\n  const index = getRandomFontIndex()\n  const fontList: Font[] = [fonts[index]]\n\n  return (\n    <>\n      <GoogleFontLoader fonts={fontList} subsets={['cyrillic-ext', 'greek']} />\n      <div style={{ fontFamily: fontList[0]?.font }}>{children}</div>\n    </>\n  )\n}\n","import { FC } from 'react'\n\nimport Container from '@material-ui/core/Container'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport Link from '@material-ui/core/Link'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\n\nimport { FontBox } from 'src/components/FontBox/FontBox'\nimport { ButtonRefresh, ButtonGithub, ButtonFont } from 'src/components/HeroButton'\nimport { TitleFont } from 'src/components/TitleFont'\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}))\n\nconst list = [1, 2, 3]\n\nexport const App: FC = () => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <TitleFont>\n              <Typography\n                component=\"h1\"\n                variant=\"h2\"\n                align=\"center\"\n                color=\"textPrimary\"\n                style={{ fontFamily: 'inherit' }}\n                gutterBottom\n              >\n                Playful Font\n              </Typography>\n            </TitleFont>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Playful\n              Fontは文字のアニメーションで遊べるサイトです。フォントや文字を自由にカスタマイズできます。\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <ButtonRefresh />\n                </Grid>\n                <Grid item>\n                  <ButtonGithub />\n                </Grid>\n                <Grid item>\n                  <ButtonFont />\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        {list.map((item, index) => (\n          <FontBox key={item} index={index} />\n        ))}\n\n        <Container maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={1} />\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Created by{' '}\n          <Link color=\"inherit\" href=\"https://github.com/naki1840\">\n            naki1840\n          </Link>\n        </Typography>\n      </footer>\n      {/* End footer */}\n    </>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\n// eslint-disable-next-line import/no-default-export\nexport default reportWebVitals\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}